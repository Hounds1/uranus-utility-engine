package io.uranus.utility.bundle.core.utility.chrono.helper.element;

import lombok.Getter;

@Getter
public enum Region {

    AFGHANISTAN(4, 30, "Asia/Kabul"),
    ALBANIA(1, 0, "Europe/Tirane"),
    ALGERIA(1, 0, "Africa/Algiers"),
    ANDORRA(1, 0, "Europe/Andorra"),
    ANGOLA(1, 0, "Africa/Luanda"),
    ARGENTINA(-3, 0, "America/Argentina/Buenos_Aires"),
    ARMENIA(4, 0, "Asia/Yerevan"),
    AUSTRALIA_SYDNEY(10, 0, "Australia/Sydney"),
    AUSTRALIA_PERTH(8, 0, "Australia/Perth"),
    AUSTRIA(1, 0, "Europe/Vienna"),
    AZERBAIJAN(4, 0, "Asia/Baku"),
    BAHRAIN(3, 0, "Asia/Bahrain"),
    BANGLADESH(6, 0, "Asia/Dhaka"),
    BELARUS(3, 0, "Europe/Minsk"),
    BELGIUM(1, 0, "Europe/Brussels"),
    BELIZE(-6, 0, "America/Belize"),
    BENIN(1, 0, "Africa/Porto-Novo"),
    BHUTAN(6, 0, "Asia/Thimphu"),
    BOLIVIA(-4, 0, "America/La_Paz"),
    BOSNIA_AND_HERZEGOVINA(1, 0, "Europe/Sarajevo"),
    BOTSWANA(2, 0, "Africa/Gaborone"),
    BRAZIL(-3, 0, "America/Sao_Paulo"),
    BRUNEI(8, 0, "Asia/Brunei"),
    BULGARIA(2, 0, "Europe/Sofia"),
    BURKINA_FASO(0, 0, "Africa/Ouagadougou"),
    BURUNDI(2, 0, "Africa/Bujumbura"),
    CAMBODIA(7, 0, "Asia/Phnom_Penh"),
    CAMEROON(1, 0, "Africa/Douala"),
    CANADA_EASTERN(-5, 0, "America/Toronto"),
    CANADA_CENTRAL(-6, 0, "America/Winnipeg"),
    CANADA_MOUNTAIN(-7, 0, "America/Denver"),
    CANADA_PACIFIC(-8, 0, "America/Vancouver"),
    CHAD(1, 0, "Africa/Ndjamena"),
    CHILE(-4, 0, "America/Santiago"),
    CHINA(8, 0, "Asia/Shanghai"),
    COLOMBIA(-5, 0, "America/Bogota"),
    COSTA_RICA(-6, 0, "America/Costa_Rica"),
    CROATIA(1, 0, "Europe/Zagreb"),
    CUBA(-5, 0, "America/Havana"),
    CYPRUS(2, 0, "Asia/Nicosia"),
    CZECH_REPUBLIC(1, 0, "Europe/Prague"),
    DENMARK(1, 0, "Europe/Copenhagen"),
    DJIBOUTI(3, 0, "Africa/Djibouti"),
    DOMINICAN_REPUBLIC(-4, 0, "America/Santo_Domingo"),
    ECUADOR(-5, 0, "America/Guayaquil"),
    EGYPT(2, 0, "Africa/Cairo"),
    EL_SALVADOR(-6, 0, "America/El_Salvador"),
    ESTONIA(2, 0, "Europe/Tallinn"),
    ETHIOPIA(3, 0, "Africa/Addis_Ababa"),
    FIJI(12, 0, "Pacific/Fiji"),
    FINLAND(2, 0, "Europe/Helsinki"),
    FRANCE(1, 0, "Europe/Paris"),
    GABON(1, 0, "Africa/Libreville"),
    GAMBIA(0, 0, "Africa/Banjul"),
    GEORGIA(4, 0, "Asia/Tbilisi"),
    GERMANY(1, 0, "Europe/Berlin"),
    GHANA(0, 0, "Africa/Accra"),
    GREECE(2, 0, "Europe/Athens"),
    GREENLAND(-3, 0, "America/Godthab"),
    GUATEMALA(-6, 0, "America/Guatemala"),
    GUINEA(0, 0, "Africa/Conakry"),
    GUINEA_BISSAU(0, 0, "Africa/Bissau"),
    GUYANA(-4, 0, "America/Guyana"),
    HAITI(-5, 0, "America/Port-au-Prince"),
    HONDURAS(-6, 0, "America/Tegucigalpa"),
    HONG_KONG(8, 0, "Asia/Hong_Kong"),
    HUNGARY(1, 0, "Europe/Budapest"),
    ICELAND(0, 0, "Atlantic/Reykjavik"),
    INDIA(5, 30, "Asia/Kolkata"),
    INDONESIA_JAKARTA(7, 0, "Asia/Jakarta"),
    INDONESIA_BALI(8, 0, "Asia/Makassar"),
    IRAN(3, 30, "Asia/Tehran"),
    IRAQ(3, 0, "Asia/Baghdad"),
    IRELAND(0, 0, "Europe/Dublin"),
    ISRAEL(2, 0, "Asia/Jerusalem"),
    ITALY(1, 0, "Europe/Rome"),
    IVORY_COAST(0, 0, "Africa/Abidjan"),
    JAMAICA(-5, 0, "America/Jamaica"),
    JAPAN(9, 0, "Asia/Tokyo"),
    JORDAN(2, 0, "Asia/Amman"),
    KAZAKHSTAN(6, 0, "Asia/Almaty"),
    KENYA(3, 0, "Africa/Nairobi"),
    KIRIBATI(14, 0, "Pacific/Kiritimati"),
    KUWAIT(3, 0, "Asia/Kuwait"),
    KYRGYZSTAN(6, 0, "Asia/Bishkek"),
    LAOS(7, 0, "Asia/Vientiane"),
    LATVIA(2, 0, "Europe/Riga"),
    LEBANON(2, 0, "Asia/Beirut"),
    LESOTHO(2, 0, "Africa/Maseru"),
    LIBERIA(0, 0, "Africa/Monrovia"),
    LIBYA(2, 0, "Africa/Tripoli"),
    LIECHTENSTEIN(1, 0, "Europe/Vaduz"),
    LITHUANIA(2, 0, "Europe/Vilnius"),
    LUXEMBOURG(1, 0, "Europe/Luxembourg"),
    MACAU(8, 0, "Asia/Macau"),
    MADAGASCAR(3, 0, "Indian/Antananarivo"),
    MALAWI(2, 0, "Africa/Blantyre"),
    MALAYSIA(8, 0, "Asia/Kuala_Lumpur"),
    MALDIVES(5, 0, "Indian/Maldives"),
    MALI(0, 0, "Africa/Bamako"),
    MALTA(1, 0, "Europe/Malta"),
    MARSHALL_ISLANDS(12, 0, "Pacific/Majuro"),
    MAURITANIA(0, 0, "Africa/Nouakchott"),
    MAURITIUS(4, 0, "Indian/Mauritius"),
    MEXICO_CITY(-6, 0, "America/Mexico_City"),
    MICRONESIA(11, 0, "Pacific/Pohnpei"),
    MOLDOVA(2, 0, "Europe/Chisinau"),
    MONACO(1, 0, "Europe/Monaco"),
    MONGOLIA(8, 0, "Asia/Ulaanbaatar"),
    MONTENEGRO(1, 0, "Europe/Podgorica"),
    MOROCCO(1, 0, "Africa/Casablanca"),
    MOZAMBIQUE(2, 0, "Africa/Maputo"),
    MYANMAR(6, 30, "Asia/Yangon"),
    NAMIBIA(2, 0, "Africa/Windhoek"),
    NAURU(12, 0, "Pacific/Nauru"),
    NEPAL(5, 45, "Asia/Kathmandu"),
    NETHERLANDS(1, 0, "Europe/Amsterdam"),
    NEW_ZEALAND(12, 0, "Pacific/Auckland"),
    NICARAGUA(-6, 0, "America/Managua"),
    NIGER(1, 0, "Africa/Niamey"),
    NIGERIA(1, 0, "Africa/Lagos"),
    NORTH_KOREA(9, 0, "Asia/Pyongyang"),
    NORWAY(1, 0, "Europe/Oslo"),
    OMAN(4, 0, "Asia/Muscat"),
    PAKISTAN(5, 0, "Asia/Karachi"),
    PALAU(9, 0, "Pacific/Palau"),
    PALESTINE(2, 0, "Asia/Gaza"),
    PANAMA(-5, 0, "America/Panama"),
    PAPUA_NEW_GUINEA(10, 0, "Pacific/Port_Moresby"),
    PARAGUAY(-4, 0, "America/Asuncion"),
    PERU(-5, 0, "America/Lima"),
    PHILIPPINES(8, 0, "Asia/Manila"),
    POLAND(1, 0, "Europe/Warsaw"),
    PORTUGAL(0, 0, "Europe/Lisbon"),
    QATAR(3, 0, "Asia/Qatar"),
    REPUBLIC_OF_KOREA(9, 0, "Asia/Seoul"),
    ROMANIA(2, 0, "Europe/Bucharest"),
    RUSSIA_MOSCOW(3, 0, "Europe/Moscow"),
    RWANDA(2, 0, "Africa/Kigali"),
    SAINT_KITTS_AND_NEVIS(-4, 0, "America/St_Kitts"),
    SAINT_LUCIA(-4, 0, "America/St_Lucia"),
    SAINT_VINCENT_AND_THE_GRENADINES(-4, 0, "America/St_Vincent"),
    SAMOA(13, 0, "Pacific/Apia"),
    SAN_MARINO(1, 0, "Europe/San_Marino"),
    SAO_TOME_AND_PRINCIPE(0, 0, "Africa/Sao_Tome"),
    SAUDI_ARABIA(3, 0, "Asia/Riyadh"),
    SENEGAL(0, 0, "Africa/Dakar"),
    SERBIA(1, 0, "Europe/Belgrade"),
    SEYCHELLES(4, 0, "Indian/Mahe"),
    SIERRA_LEONE(0, 0, "Africa/Freetown"),
    SINGAPORE(8, 0, "Asia/Singapore"),
    SLOVAKIA(1, 0, "Europe/Bratislava"),
    SLOVENIA(1, 0, "Europe/Ljubljana"),
    SOLOMON_ISLANDS(11, 0, "Pacific/Guadalcanal"),
    SOMALIA(3, 0, "Africa/Mogadishu"),
    SOUTH_AFRICA(2, 0, "Africa/Johannesburg"),
    SOUTH_SUDAN(3, 0, "Africa/Juba"),
    SPAIN(1, 0, "Europe/Madrid"),
    SRI_LANKA(5, 30, "Asia/Colombo"),
    SUDAN(2, 0, "Africa/Khartoum"),
    SURINAME(-3, 0, "America/Paramaribo"),
    SWAZILAND(2, 0, "Africa/Mbabane"),
    SWEDEN(1, 0, "Europe/Stockholm"),
    SWITZERLAND(1, 0, "Europe/Zurich"),
    SYRIA(2, 0, "Asia/Damascus"),
    TAIWAN(8, 0, "Asia/Taipei"),
    TAJIKISTAN(5, 0, "Asia/Dushanbe"),
    TANZANIA(3, 0, "Africa/Dar_es_Salaam"),
    THAILAND(7, 0, "Asia/Bangkok"),
    TIMOR_LESTE(9, 0, "Asia/Dili"),
    TOGO(0, 0, "Africa/Lome"),
    TONGA(13, 0, "Pacific/Tongatapu"),
    TRINIDAD_AND_TOBAGO(-4, 0, "America/Port_of_Spain"),
    TUNISIA(1, 0, "Africa/Tunis"),
    TURKEY(3, 0, "Europe/Istanbul"),
    TURKMENISTAN(5, 0, "Asia/Ashgabat"),
    TUVALU(12, 0, "Pacific/Funafuti"),
    UGANDA(3, 0, "Africa/Kampala"),
    UKRAINE(2, 0, "Europe/Kiev"),
    UNITED_ARAB_EMIRATES(4, 0, "Asia/Dubai"),
    UNITED_KINGDOM(0, 0, "Europe/London"),
    UNITED_STATES_EASTERN(-5, 0, "America/New_York"),
    UNITED_STATES_CENTRAL(-6, 0, "America/Chicago"),
    UNITED_STATES_MOUNTAIN(-7, 0, "America/Denver"),
    UNITED_STATES_PACIFIC(-8, 0, "America/Los_Angeles"),
    URUGUAY(-3, 0, "America/Montevideo"),
    UZBEKISTAN(5, 0, "Asia/Tashkent"),
    VANUATU(11, 0, "Pacific/Efate"),
    VATICAN(1, 0, "Europe/Vatican"),
    VENEZUELA(-4, 0, "America/Caracas"),
    VIETNAM(7, 0, "Asia/Ho_Chi_Minh"),
    YEMEN(3, 0, "Asia/Aden"),
    ZAMBIA(2, 0, "Africa/Lusaka"),
    ZIMBABWE(2, 0, "Africa/Harare");

    private final int utcOffsetHours;
    private final int utcOffsetMinutes;
    private final String timeZone;

    Region(int utcOffsetHours, int utcOffsetMinutes, String timeZone) {
        this.utcOffsetHours = utcOffsetHours;
        this.utcOffsetMinutes = utcOffsetMinutes;
        this.timeZone = timeZone;
    }

    public String zoneOffset() {
        return String.format("%s%02d:%02d",
                (utcOffsetHours >= 0 ? "+" : ""),
                utcOffsetHours,
                utcOffsetMinutes
        );
    }


    public Region selectRegion(String timeZone) {
        for (Region val : values()) {
            if (val.getTimeZone().equals(timeZone)) {
                return val;
            }
        }

        return Region.REPUBLIC_OF_KOREA;
    }
}
